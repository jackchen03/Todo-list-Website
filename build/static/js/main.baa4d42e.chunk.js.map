{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","value","ref","useEffect","current","usePrevious","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","focus","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","listHeadingRef","prevTaskLength","length","updatedTask","map","toggleCompleted","filterList","isPressed","taskList","taskNoun","headingText","newtask","nanoid","tabIndex","role","aria-labelledby","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.baa4d42e.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\nfunction Todo(props) {\n  const [isEditing, setEditing] = useState(false);\n  const [newName, setNewName] = useState(\"\");\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const wasEditing = usePrevious(isEditing);\n\n  function handleChange(e){\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e){\n    e.preventDefault();\n    props.editTask(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n  const editingTemplate = (\n    <form \n      className=\"stack-small\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.name}\n        </label>\n        <input id={props.id} className=\"todo-text\" type=\"text\" onChange={handleChange} ref={editFieldRef}/>\n      </div>\n      <div className=\"btn-group\">\n        <button type=\"button\" className=\"btn todo-cancel\" onClick={() => setEditing(false)}>\n          Cancel\n          <span className=\"visually-hidden\">renaming {props.name}</span>\n        </button>\n        <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n          Save\n          <span className=\"visually-hidden\">new name for {props.name}</span>\n        </button>\n      </div>\n    </form>\n  );\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n          <input\n            id={props.id}\n            type=\"checkbox\"\n            defaultChecked={props.completed}\n            onChange={() => props.toggleTaskCompleted(props.id)}\n          />\n          <label className=\"todo-label\" htmlFor={props.id}>\n            {props.name}\n          </label>\n        </div>\n        <div className=\"btn-group\">\n          <button \n            type=\"button\" \n            className=\"btn\"\n            onClick={() => setEditing(true)}\n            ref={editButtonRef}\n          >\n            Edit <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn__danger\"\n            onClick={() => props.deleteTask(props.id)}\n          >\n            Delete <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n        </div>\n    </div>\n  );\n  useEffect(() => {\n    if (isEditing && !wasEditing) {\n      editFieldRef.current.focus();\n    }\n    if (wasEditing && !isEditing){\n      editButtonRef.current.focus();\n    }\n  }, [isEditing])\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}\nexport default Todo;","import React, { useState }from \"react\";\n\nfunction Form(props) {\n  const [name, setName] = useState(\"\");\n\n  function handleChange(e){\n    setName(e.target.value);\n  }\n\n  function handleSubmit(e){\n    e.preventDefault();\n    props.addTask(name);\n    setName(\"\");\n  }\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input\n        type=\"text\"\n        id=\"new-todo-input\"\n        className=\"input input__lg\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value={name}\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  );\n}\n\nexport default Form;","import React, { useState } from \"react\";\n\nfunction FilterButton(props) {\n  return (\n    <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\" onClick={() => props.setFilter(props.name)}>\n      <span className=\"visually-hidden\">Show </span>\n      <span>{props.name} </span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  );\n}\n\nexport default FilterButton;","import React, { useEffect, useRef, useState } from \"react\";\nimport { nanoid } from \"nanoid\"\nimport Todo from \"./components/Todo\"\nimport Form from \"./components/Form\"\nimport FilterButton from \"./components/FilterButton\";\nimport { func } from \"prop-types\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState(\"All\");\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n  function addTask(name){\n    const newtask = {id: \"todo-\" + nanoid(), name: name, completed: false};\n    setTasks([...tasks, newtask]);\n  }\n\n  function deleteTask(id){\n    const updatedTask = tasks.filter(task => id !== task.id);\n    setTasks(updatedTask);\n  }\n\n  function editTask(id, newName){\n    const updatedTask = tasks.map(task => {\n      if (id == task.id){\n        return {...task, name: newName};\n      }\n      return task;\n    });\n    setTasks(updatedTask);\n  }\n\n  function toggleCompleted(id){\n    const updatedTask = tasks.map(task => {\n      if (id == task.id) {\n        return {...task, completed: !task.completed};\n      }\n      return task;\n    });\n    setTasks(updatedTask);\n  }\n  \n  const filterList = FILTER_NAMES.map(name =>(\n      <FilterButton \n        key={name} \n        name={name} \n        isPressed={name===filter}\n        setFilter={setFilter}\n      />\n    )\n  );\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n      <Todo \n        name={task.name} \n        completed={task.completed}\n        id={task.id}\n        key={task.id}\n        toggleCompleted={toggleCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    )\n  );\n  \n  const taskNoun = tasks.length > 1 ? \"tasks\" : \"task\";\n  const headingText = `${tasks.length} ${taskNoun} remaining`;\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\n];\n\nReactDOM.render(\n  <App tasks={DATA} />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}